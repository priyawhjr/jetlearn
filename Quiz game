# Quiz game
# do this on v.s code or on replit->pygame template

import pgzrun
WIDTH=900
HEIGHT=550
title_box=Rect(0,0,900,80)
question_box=Rect(15,110,650,140)
answer_box1=Rect(15,270,315,115)
answer_box2=Rect(345,270,315,115)
answer_box3=Rect(15,405,315,115)
answer_box4=Rect(345,405,315,115)
skip_box=Rect(705,110,155,115)
reset=Rect(705,250,155,115)
timer=Rect(705,390,155,115)
score=0
time_left=60 
question_file_name="questions.txt"
title=""
game_over=False
questions=[]
question_count=0
question_index=0
question=[]
answers=[answer_box1,answer_box2,answer_box3,answer_box4]
def draw ():
    screen.fill ("blue")
    screen.draw.filled_rect(title_box,"violet")
    screen.draw.filled_rect(question_box,"violet")
    screen.draw.filled_rect(answer_box1,"violet")
    screen.draw.filled_rect(answer_box2,"violet")
    screen.draw.filled_rect(answer_box3,"violet")
    screen.draw.filled_rect(answer_box4,"violet")
    screen.draw.filled_rect(skip_box,"violet")
    screen.draw.filled_rect(reset,"violet")
    screen.draw.filled_rect(timer,"violet")
    title="WELCOME TO QUIZ MASTER..."+f"Q: {question_index} of {question_count}"
    screen.draw.textbox(title,title_box,color="black")
    screen.draw.textbox("skip",skip_box,color="black")
    screen.draw.textbox("reset",reset,color="black")
    screen.draw.textbox(str(time_left),timer,color="black")
    screen.draw.textbox(question[0].strip(),question_box,color="black")
    index=1
    for answer in answers:
        screen.draw.textbox(question[index].strip(),answer,color="black")
        index=index+1
def update():
    title_box.x-=2
    if title_box.right<0:
        title_box.left=900
def gameover():
    global time_left,game_over,question
    message=f"Game over!\n You got {score} questions correct!"
    time_left=0
    game_over=True
    question=[message,"-","-","-","-",5]
def updatetime():
    global time_left
    if time_left:
        time_left=time_left-1
    else:
        gameover()
clock.schedule_interval(updatetime,1)
def on_mouse_down(pos):
    index=1
    for box in answers:
        if box.collidepoint(pos):
            if index is int(question[5]):
                correct_answer()
            else:
                gameover()
        index=index+1
    if skip_box.collidepoint(pos):
        skip()
    if reset.collidepoint(pos):
        reset_game()
def read_question_file():
    global question_count,questions
    q_file=open(question_file_name,"r")
    for question in q_file:
        questions.append(question)
        question_count=question_count+1
    q_file.close()
def read_next_question():
    global question_index
    question_index=question_index+1
    return questions.pop(0).split("|")
def correct_answer():
    global score,question,time_left,questions
    score=score+1
    if questions:
        question=read_next_question()
        time_left=60
    else:
        gameover()
def skip():
    global question,time_left
    if questions and not game_over:
        question=read_next_question()
        time_left=60
    else:
        gameover()
read_question_file()
question=read_next_question()
def reset_game():
    global score,time_left,game_over,questions,question_count,question_index,question
    score=0
    time_left=60
    game_over=False
    questions=[]
    question_count=0
    question_index=0
    read_question_file()
    question=read_next_question()
print(question)
pgzrun.go()
#make more questions
